%
% iMath.sty --- macros for Mathematical computing and printing
% (C) 2010-2014 Kentaro YOSHITOMI(yositomi (at) las.osakafu-u.ac.jp)
\def\iMath@Date{Time-stamp: "2015/12/28"}%
\def\iMath@Revision{0.91b}%
\RequirePackage{amsmath}
\RequirePackage{amssymb}
% \def\@get@rev Time-stamp: "#1"\relax{\gdef\@time@{#1}}%
% \expandafter\@get@rev \iMath@Date\relax%
% \ProvidesPackage{iMath}[\@year@/@month@/\@day@ \iMath@Revision]
% \ProvidesPackage{iMath}[\@time@ \iMath@Revision]%
%%
%% LuaLaTeX does not use \fmtname (LaTeX2e case: 'LaTeX2e')
% if \@ifundefined not defind ^^; uncomment the following block
% \def\@ifundefined#1{%
%   \expandafter\ifx\csname#1\endcsname\relax
%     \expandafter\@firstoftwo
%   \else
%     \expandafter\@secondoftwo
%   \fi}
\@ifundefined{fmtname}{}{\ProvidesPackage{iMath}}
%
% MIT License applied.
% not use perl, but can be used with emath, KETpic, PariGP, 
% Mathematica, etc...(maybe)
% \NeedsTeXFormat{LaTeX2e} ... usable under lualatex, latex3(?), latex2e 
% \ProvidesPackage{iMath}[2014/04/22 v0.0]%%% 仕様変更注意
\makeatletter
%%% rnd@i, rnd@j, @imcnti, @imcntj, @imcnta,... should be 'local'
\newcount\rnd@i
\newcount\rnd@j
\newcount\@imcnta
\newcount\@imcntb
\newcount\@imcntc
\newcount\@imcntd
\newcount\@imcnti
\newcount\@imcntj
%%% 
%%% Basic Integer Arithmetic including Modulo and Power function
%%%
\def\im@inc#1{%%% ++
  \@tempcnta=#1\advance\@tempcnta\@ne\xdef#1{\number\@tempcnta}}
\def\im@dec#1{%%% -- 
  \@tempcnta=#1\advance\@tempcnta\m@ne\xdef#1{\number\@tempcnta}}
\def\im@add#1#2#3{%%%
  \@tempcnta=#1\advance\@tempcnta #2\xdef#3{\number\@tempcnta}}
\def\im@sub#1#2#3{%%%
  \@tempcnta=#1\advance\@tempcnta -#2\xdef#3{\number\@tempcnta}}
\def\im@mul#1#2#3{%%%
  \@tempcnta=#1\multiply\@tempcnta by #2\xdef#3{\number\@tempcnta}}
\def\im@div#1#2#3{%%%
  \@tempcnta=#1\divide\@tempcnta by #2\xdef#3{\number\@tempcnta}}
\def\im@divres#1#2#3#4{%%%
  \@imcnta=#1\@imcntb=#2%
  \@tempcnta=#1\divide\@tempcnta by #2\xdef#3{\number\@tempcnta}%
  \multiply\@imcntb by \@tempcnta%
  \advance\@imcnta -\@imcntb\xdef#4{\number\@imcnta}%
}
\def\im@mod#1#2#3{%%%
  % \expandafter\@tmp@la@i #1\@imcnti=\number\@tmp@la@i\relax
  % \expandafter\@tmp@la@j #1\@imcntj=\number\@tmp@la@j\relax
  % \divide\@imcnti #2\multiply\@imcnti by -#2
  % \advance\@imcntj\@imcnti\xdef#3{\number\@imcntj}%
  \expandafter\@imcnti #1\relax
  \expandafter\@imcntj #1\relax
  \divide\@imcnti #2\multiply\@imcnti by -#2
  \advance\@imcntj\@imcnti\xdef#3{\number\@imcntj}}  
\def\im@pow{\@ifnextchar[%%%]
  {\@im@pow}{\@im@pow[0]}}
\def\@im@pow[#1]#2#3#4{% #4=#2^#3 mod #1, #1=0 default
  \def\im@tmp@r{1}\xdef\im@tmp@a{#2}\xdef\im@tmp@b{#3}%
  \xdef\im@tmp@m{#1}%
  \@whilenum \im@tmp@b > 0 \do{%
    \im@mod\im@tmp@b2\im@tmp@f%
    \ifcase\im@tmp@f\or\im@mul\im@tmp@r\im@tmp@a\im@tmp@r\relax
    \ifnum\im@tmp@m > 0\im@mod\im@tmp@r\im@tmp@m\im@tmp@r\fi\fi
    \im@mul\im@tmp@a\im@tmp@a\im@tmp@a%
    \ifnum\im@tmp@m > 0\im@mod\im@tmp@a\im@tmp@m\im@tmp@a\fi
    \im@div\im@tmp@b2\im@tmp@b%
  }%
  \xdef#4{\im@tmp@r}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% For loop with semicolon separated value
%%% See latex.ltx @for definition.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\@empty{}
% \gdef\sep@ch{;}
\long\def\sc@fornoop#1\@@#2#3{}
\long\def\sc@for#1:=#2\do#3{%
  \expandafter\def\expandafter\sc@fortmp\expandafter{#2}%
  \ifx\sc@fortmp\@empty \else
    \expandafter\sc@forloop#2;\@nil;\@nil\@@#1{#3}\fi}
\long\def\sc@forloop#1;#2;#3\@@#4#5{\def#4{#1}\ifx #4\@nnil \else
       #5\def#4{#2}\ifx #4\@nnil \else#5\sc@iforloop #3\@@#4{#5}\fi\fi}
\long\def\sc@iforloop#1;#2\@@#3#4{\def#3{#1}\ifx #3\@nnil
       \expandafter\sc@fornoop \else
      #4\relax\expandafter\sc@iforloop\fi#2\@@#3{#4}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Original Counter Method
%%% Ex. 
%%% \imNewCount{ABC} -> internal new counter \@im:ABC genenerated
%%% \imSetCount{ABC}{1} -> set the value 1 to the defined counter ABC 
%%% \imGetCount{ABC} -> get the value of the counter ABC
%%% \imAdvance{ABC}{3} -> ABC = ABC + 3
%%% \imMultiply{ABC}{3} -> ABC = ABC * 3
%%% \imDivide{ABC}{3} -> ABC = ABC / 3 (the remainder is ignored)
%%% \imCount{ABC} -> imGetCount{ABC}, \imCount{ABC}=3 : forbidden.
%%% (imCount{XXX}=.. supported).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\imNewCount#1{%
  \expandafter\xdef\csname im@cnt:#1\endcsname{0}}
\def\imSetCount#1#2{%
  \expandafter\xdef\csname im@cnt:#1\endcsname{#2}}
\def\imGetCount#1{\csname im@cnt:#1\endcsname}
\def\im@Count#1=#2{\imSetCount{#1}{#2}}
\def\imCount#1{%
  \@ifnextchar={\im@Count{#1}}{\imGetCount{#1}}}
\def\imAdvance#1#2{%
  \expandafter\@imcnti\csname im@cnt:#1\endcsname\relax
  \advance\@imcnti by #2\relax\imSetCount{#1}{\number\@imcnti}}
\def\imMultiply#1#2{%
  \expandafter\@imcnti\csname im@cnt:#1\endcsname\relax
  \multiply\@imcnti by #2\relax\imSetCount{#1}{\number\@imcnti}}
\def\imDivide#1#2{%
  \expandafter\@imcnti\csname im@cnt:#1\endcsname\relax
  \divide\@imcnti by #2\relax\imSetCount{#1}{\number\@imcnti}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Original Stack Frame
%%% \imPush / \imPop
%%% \imPush[a]1\imPush[a]2
%%% \imPop[a]\TMPa\imPop[a]\TMPb\TMPa\TMPb : 21
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \newcount\im@stack@ct
% \im@stack@ct\z@
\def\imPush{%
  \@ifnextchar[{\@imPush}{\@imPush[]}%]
}
\def\@imPush[#1]#2{%
  \@ifundefined{im@stack@ct#1}{%
    \expandafter\xdef\csname im@stack@ct#1\endcsname{0}}{}%
  \expandafter\im@inc\csname im@stack@ct#1\endcsname\relax
  \xdef\im@stk@num{\csname im@stack@ct#1\endcsname}%
  \expandafter\xdef\csname im@stk#1:\im@stk@num\endcsname{#2}}%
\def\imPop{%
  \@ifnextchar[{\@imPop}{\@imPop[]}%]
}
\def\@imPop[#1]#2{%
  \@ifundefined{im@stack@ct#1}{%
    \message{Err:stack empty}%
    \xdef#2{\@empty}%
  }{%
    \expandafter\ifnum\csname im@stack@ct#1\endcsname>0
    \xdef\im@stk@num{\csname im@stack@ct#1\endcsname}%
    \xdef#2{\csname im@stk#1:\im@stk@num\endcsname}%
    \expandafter\im@dec\csname im@stack@ct#1\endcsname\relax
    \else
    \message{Err:stack empty}%
    \xdef#2{\@empty}
    \fi}%
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Array %%%
%%% Declare Array #2 size of #1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\NewArray#1#2{%% 
  \expandafter\xdef\csname #2:@attr@\endcsname{NumericalArray,Starting1}%
  \expandafter\xdef\csname #2:0\endcsname{#1}%
  \expandafter\xdef\csname #2:size\endcsname{#1}%
  \@tempcnta\z@\relax
  \@tempcntb=#1\relax\advance\@tempcntb\@ne\relax
  \@whilenum\@tempcnta < \@tempcntb \do{%%
    \advance\@tempcnta\@ne\relax
    \expandafter\xdef\csname #2:\number\@tempcnta\endcsname{0}}
  \expandafter\gdef\csname #2\endcsname[##1]{\csname #2:##1\endcsname}%
  \expandafter\gdef\csname get#2\endcsname##1{\csname #2:##1\endcsname}%
  \expandafter\gdef\csname set#2\endcsname##1##2{%
    \expandafter\xdef\csname #2:##1\endcsname{##2}}%
  \expandafter\gdef\csname attr#2\endcsname{\csname #2:@attr@\endcscname}%
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Declare Associative Array
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\NewAssocArray#1#2{%%
  \expandafter\xdef\csname #2:@attr@\endcsname{AssocArray,Keys:#1}%
  \expandafter\xdef\csname #2:@keys@\endcsname{#1}%
  \@tempcnta\z@\relax
  \@for\x:=#1\do{%
    \expandafter\xdef\csname #2:\x\endcsname{\x}%
    \advance\@tempcnta\@ne}%
  \expandafter\xdef\csname #2:@size@\endcsname{\number\@tempcnta}%
  \expandafter\gdef\csname #2\endcsname[##1]{\csname #2:##1\endcsname}%
  \expandafter\gdef\csname get#2\endcsname##1{\csname #2:##1\endcsname}%
  \expandafter\gdef\csname set#2\endcsname##1##2{%
    \@ifundefined{#2:##1}{\message{Warning:accessed for non-defined key}}{}%
    \expandafter\xdef\csname #2:##1\endcsname{##2}}%
  \expandafter\gdef\csname setall#2\endcsname##1{%
    \NewArray{\csname #2:@size@\endcsname}{im@aa}%
    \xdef\im@tmp@keys{\csname #2:@keys@\endcsname}%
    \@tempcnta\z@\relax
    \@for\im@k:=##1\do{%
      \advance\@tempcnta\@ne\relax
      \setim@aa{\number\@tempcnta}{\im@k}}
    \@tempcnta\z@\relax
    \@for\im@k:=\im@tmp@keys\do{%
      \advance\@tempcnta\@ne\relax
      \expandafter\xdef\csname #2:\im@k\endcsname{%
        \im@aa[\number\@tempcnta]}}}%
  \expandafter\gdef\csname attr#2\endcsname{\csname #2:@attr@\endcscname}%
  \expandafter\gdef\csname key#2\endcsname{\csname #2:@keys@\endcsname}%
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Reverse CSV and string
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcount\im@rev@ct%
\def\ReverseCSV#1#2{
  \im@rev@ct\z@\relax
  \@for\@x:=#1\do{%
    \advance\im@rev@ct\@ne%
    \imPush[r@csv]\@x}%
  \xdef\im@ret{}\edef\im@rcsv@n{\number\im@rev@ct}%
  \loop
  \imPop[r@csv]\im@rcsv
  \ifx\im@rcsv\@empty \repeat
  % \im@rev@ct\z@\relax
  % \@whilenum \im@rev@ct < \im@rcsv@n \do{%
  %   \imPop[r@csv]\im@rcsv@a%
  %   \ifnum\im@rev@ct=0\xdef\im@ret{\im@rcsv@a}%
  %   \else\xdef\im@ret{\im@ret,\im@rcsv@a}\fi
  %   \advance\im@rev@ct\@ne\relax
  % }%
  \xdef#2{\im@ret}%
}
\def\ReverseSTR#1#2{
  \im@rev@ct\z@\relax
  \expandafter\@tfor\expandafter\@x\expandafter:\expandafter=#1\do{%
    \advance\im@rev@ct\@ne%
    \imPush[r@csv]\@x}%
  \xdef\im@ret{}\edef\im@rcsv@n{\number\im@rev@ct}%
  \im@rev@ct\z@\relax
  \@whilenum \im@rev@ct < \im@rcsv@n \do{%
    \imPop[r@csv]\im@rcsv@a%
    \ifnum\im@rev@ct=0\xdef\im@ret{\im@rcsv@a}%
    \else\xdef\im@ret{\im@ret\im@rcsv@a}\fi
    \advance\im@rev@ct\@ne\relax
  }%
  \xdef#2{\im@ret}%
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Alias \ZAdd 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\let\ZAdd\im@add\relax\let\ZSub\im@sub\relax%
\let\ZMul\im@mul\relax\let\ZDiv\im@div\relax\let\ZDivRes\im@divres\relax%
\let\ZMod\im@mod\relax\let\ZPow\im@pow\relax%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% CallPariGP : use CAS (e.g. Pari/GP) with \@@input cmd(tex:\input)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\CallPariGP#1#2{% #1 = random seed
  \begingroup\makeatletter\endlinechar=\m@ne\everyeof{\noexpand}%
  \edef\@@x{\endgroup\def\noexpand#2{\@@input|"echo '#1'|gp -q" }%
  }\@@x%
}
\def\CallMaxima#1#2{% #1 = random seed
  \begingroup\makeatletter\endlinechar=\m@ne\everyeof{\noexpand}%%
  \edef\@@x{\endgroup\def\noexpand#2{\@@input|"echo '#1'|maxima --very-quiet" }%
  }\@@x%
}
%%%%%% GetGCD #3 = GCD(#1,#2) %%%%%
\def\GetGCD#1#2#3{%%%
  \def\@@tmp@a{#1}\def\@@tmp@b{#2}%%%
  \ifnum \@@tmp@a<0 \im@mul\@@tmp@a{-1}\@@tmp@a\fi
  \ifnum \@@tmp@b<0 \im@mul\@@tmp@b{-1}\@@tmp@b\fi
  \ifnum \@@tmp@a<\@@tmp@b
  \edef\@tmp@a{\@@tmp@b}\relax\edef\@tmp@b{\@@tmp@a}%%%
  \else
  \edef\@tmp@a{\@@tmp@a}\relax\edef\@tmp@b{\@@tmp@b}%%%
  \fi%
  \ifnum\@tmp@b = 0
  \xdef#3{\@tmp@a}%%%
  \else
  \im@mod\@tmp@a\@tmp@b\@tmp@r%
  \@whilenum \@tmp@r > 0 \do {%%%
    \edef\@tmp@a{\@tmp@b}%%%
    \edef\@tmp@b{\@tmp@r}%%%
    \im@mod\@tmp@a\@tmp@b\@tmp@r
  }%%%
  \xdef#3{\@tmp@b}%%%
  \fi%
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Rational Number Arithmetic \QAdd,\QSub,\QMul,\QDiv,\QPow %%%%%
%%%%% Rational Number Printing \QFrac,
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% a/b か a か (check if the string has / , without numerical check)
\def\@has@slash#1\relax{TT\fi
  \def\@@flag{0}\def\@@true{1}%%%
  \def\@slash{/}%%%
  \@tfor\@x:=#1\do{%%%
    \if\@x\@slash\def\@@flag{1}\fi
  }%%%
  \if\@@flag\@@true
}
\def\IfHasSlash#1#2#3{%%% #1:csname, #2:true, #3:false
  \edef\@arg{#1}%%%
  \if\expandafter\@has@slash\@arg\relax%%%
  #2\else #3\fi
}
\let\IfNotInt\IfHasSlash%%% same as IfHasSlash
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\sl@numden#1/#2:#3{%%%
  \expandafter\gdef\csname #3num\endcsname{#1}%%%
  \expandafter\gdef\csname #3den\endcsname{#2}%%%
}
\def\RatNumDen#1{%%%
  \edef\tmp@arg{\csname #1\endcsname}%%%
  % tmp@arg = \tmp@arg
  \IfHasSlash\tmp@arg{\expandafter\sl@numden\tmp@arg:{#1}}%%%
  {\expandafter\sl@numden\tmp@arg/1:{#1}}%%%
}
\def\QRed#1{%%%
  \edef\tmp@A{#1}%%%
  \RatNumDen{tmp@A}
  \GetGCD\tmp@Aden\tmp@Anum\tmp@Ag
  \im@div\tmp@Aden\tmp@Ag\tmp@Aden
  \im@div\tmp@Anum\tmp@Ag\tmp@Anum
  \ifnum\tmp@Aden < 0 
  \im@mul\tmp@Anum{-1}\tmp@Anum
  \im@mul\tmp@Aden{-1}\tmp@Aden
  \fi
  \ifnum\tmp@Aden>1
  \edef#1{\tmp@Anum/\tmp@Aden}%%%
  \else
  \edef#1{\tmp@Anum}%%%
  \fi
}
\def\QAdd#1#2#3{%%%
  \def\tmp@A{#1}\def\tmp@B{#2}%%%
  \RatNumDen{tmp@A}\RatNumDen{tmp@B}%%%
  \im@mul\tmp@Aden\tmp@Bden\tmp@Cden
  \im@mul\tmp@Anum\tmp@Bden\tmp@CnumA
  \im@mul\tmp@Aden\tmp@Bnum\tmp@CnumB
  \im@add\tmp@CnumA\tmp@CnumB\tmp@Cnum%%%
  \GetGCD\tmp@Cnum\tmp@Cden\tmp@Cg%%%
  \im@div\tmp@Cnum\tmp@Cg\tmp@Cnum
  \im@div\tmp@Cden\tmp@Cg\tmp@Cden
  \ifnum\tmp@Cden=1
  \edef#3{\tmp@Cnum}%%%
  \else
  \edef#3{\tmp@Cnum/\tmp@Cden}%%%
  \fi
}
\def\QMul#1#2#3{%%%
  \def\tmp@A{#1}\def\tmp@B{#2}%%%
  \RatNumDen{tmp@A}\RatNumDen{tmp@B}%%%
  \im@mul\tmp@Aden\tmp@Bden\tmp@Cden%%%
  \im@mul\tmp@Anum\tmp@Bnum\tmp@Cnum%%%
  \GetGCD\tmp@Cnum\tmp@Cden\tmp@Cg%%%
  \im@div\tmp@Cnum\tmp@Cg\tmp@Cnum
  \im@div\tmp@Cden\tmp@Cg\tmp@Cden
  \ifnum\tmp@Cden=1
  \edef#3{\tmp@Cnum}%%%
  \else
  \edef#3{\tmp@Cnum/\tmp@Cden}%%%
  \fi
}
\def\QSub#1#2#3{%%%
  \def\tmp@A{#1}\def\tmp@B{#2}%%%
  \RatNumDen{tmp@A}\RatNumDen{tmp@B}%%%
  \im@mul\tmp@Bnum{-1}\tmp@Bnum%%%
  \im@mul\tmp@Aden\tmp@Bden\tmp@Cden
  \im@mul\tmp@Anum\tmp@Bden\tmp@CnumA
  \im@mul\tmp@Aden\tmp@Bnum\tmp@CnumB
  \im@add\tmp@CnumA\tmp@CnumB\tmp@Cnum%%%
  \GetGCD\tmp@Cnum\tmp@Cden\tmp@Cg%%%
  \im@div\tmp@Cnum\tmp@Cg\tmp@Cnum
  \im@div\tmp@Cden\tmp@Cg\tmp@Cden
  \ifnum\tmp@Cden=1
  \edef#3{\tmp@Cnum}%%%
  \else
  \edef#3{\tmp@Cnum/\tmp@Cden}%%%
  \fi
}
\def\QDiv#1#2#3{%%%
  \def\tmp@A{#1}\def\tmp@B{#2}%%%
  \RatNumDen{tmp@A}\RatNumDen{tmp@B}%%%
  \im@mul\tmp@Aden\tmp@Bnum\tmp@Cden%%%
  \im@mul\tmp@Anum\tmp@Bden\tmp@Cnum%%%
  \ifnum\tmp@Cden < 0 
  \im@mul\tmp@Cden{-1}\tmp@Cden
  \im@mul\tmp@Cnum{-1}\tmp@Cnum
  \fi
  \GetGCD\tmp@Cnum\tmp@Cden\tmp@Cg%%%
  \im@div\tmp@Cnum\tmp@Cg\tmp@Cnum%%%
  \im@div\tmp@Cden\tmp@Cg\tmp@Cden%%%
  \ifnum\tmp@Cden=1
  \edef#3{\tmp@Cnum}%%%
  \else
  \edef#3{\tmp@Cnum/\tmp@Cden}%%%
  \fi
}
\def\QInv#1{%%%
  \QDiv{1}{#1}\@@a
  \edef#1{\@@a}
}
% \def\QFrac#1#2{\def\tmp@A{#1}%%%
%   \RatNumDen{tmp@A}%%%
%   \csname #2\endcsname{\tmp@Anum}{\tmp@Aden}
% }
\gdef\@fraccmd{frac}
\def\SetFracCmd#1{%%%
  \gdef\@fraccmd{#1}%%%
}
\def\QFrac#1{%%%
  \def\tmp@A{#1}%%%
  \RatNumDen{tmp@A}%%%
  \ifnum\tmp@Anum<0\im@mul\tmp@Anum{-1}\tmp@Anum\def\tmp@sig{-}
  \else\def\tmp@sig{}\fi
  \ifnum\tmp@Aden>1
  \tmp@sig\csname\@fraccmd\endcsname%
  {\,\tmp@Anum\,}{\,\tmp@Aden\,}%%%
  \else
  \tmp@sig\tmp@Anum%%%
  \fi
}
\def\QFracParen#1{%%% QFrac with ( ) if negative
  \def\tmp@A{#1}\relax\RatNumDen{tmp@A}%%%
  \ifnum\tmp@Anum<0\left(\QFrac#1\right)\else
  \QFrac#1\fi
}
\let\QFracP\QFracParen% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% random number related (experimental) 
%%%% Use '.lmr' for file name exttention to save the ramdom seed
%%%% if \jobname.lmr found, read the file and produce 
%%%%   the same random pattern.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\gdef\@use@pari{0}
\def\UsePari{\gdef\@use@pari{1}}
\let\UsePariGP\UsePari
\def\NotUsePari{\gdef\@use@pari{0}}
\let\NotUsePariGP\NotUsePari
\def\im@RP{301003151}% prime(10)^2*prime(20)^3
\def\im@RA{2060}% prime(10)*prime(20)+1
\def\im@RB{20677}% 10000000-th prime, the b of recursion formula 'ax+b'
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% If you use pre-defined seed file, each value of which is
%%% in the range 0 - max-1, set the value to the max.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\@RSEED@MAX{32768}%%%% default max
\def\SetRSeedMax#1{\gdef\@RSEED@MAX{#1}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\gdef\@RSeed{}%%%
\def\@get@random@seed@ne#1{% #1 = random seed
  \begingroup\makeatletter\endlinechar=\m@ne\everyeof{\noexpand}%%%
  \ifcase\@use@pari%%% Not use pari
  \IfFileExists{/dev/uraondom}{%%%
    \gdef\@RSEED@MAX{65536}%%%
    \edef\@@x{\endgroup\def\noexpand#1{%%% -N4 too big, -N2 2byte = 2^16
        \@@input|"od -vAn -N2 -tu8 </dev/urandom|sed 's/ //g'|sed '/^$/d'" }%$
    }\@@x}{
    \gdef\@RSEED@MAX{32768}%% Windows: 0 ... 32767 : 2^15
    \edef\@@x{\endgroup\def\noexpand#1{%%% Windows Case
        \@@input|"echo \%RANDOM\%"}%%
    }\@@x}%%%
  \or%%% Use pari (@use@pari{1}) case
  \edef\@@x{\endgroup\def\noexpand#1{%%%
      \@@input|"echo 'random({N=2^15})'|gp -q" }
  }\@@x
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% e.g. \NewRandomSeed{50}: 50s random seed generated.
%%%%% \IRand functions use pop one of them and 
%%%%%        makes desired random integer via the IMod macro.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \def\NewRandomSeed#1{%%%
%   \gdef\@RSeed{}%%%
%   \rnd@j=0\relax\@whilenum \rnd@j < #1 \do {%%%
%     \@get@random@seed@ne\rnd@@temp%%%
%     \ifnum\rnd@j=0
%     \xdef\@RSeed{\rnd@@temp}%%%
%     \else
%     \xdef\@RSeed{\@RSeed,\rnd@@temp}%%%
%     \fi
%     \advance\rnd@j\@ne
%   }%%%
% }
% \def\PopRSeed#1{%%%
%   \@tempcnta=\z@
%   \let\random@seed\@empty
%   \expandafter\@for\expandafter\@r\expandafter:\expandafter=\@RSeed\do{%%%
%     \ifnum\@tempcnta=\z@
%     \edef#1{\@r}%%%
%     \else
%     \ifnum\@tempcnta=\@ne
%     \edef\random@seed{\@r}%%%
%     \else
%     \edef\random@seed{\random@seed,\@r}%%%
%     \fi
%     \fi
%     \advance\@tempcnta\@ne
%   }%
%   \xdef\@RSeed{\random@seed}%%%
% }
\def\SetRandomSeed#1{%%%
  % \ifUsePGFrandom
  \gdef\@RSeed{#1}%%% as csv
}
% \def\SaveRandomSeed{
%   \write18{echo "\gdef\ @RSeed{\@RSeed}"|sed 's/ //g' > \jobname.lmr}
% }
\def\SaveRandomSeed{%%%
  \IfFileExists{/bin/echo}{%%% NotWindowz-case ^^;
    \write18{/bin/echo "\@RSeed" > \jobname.lmr}
  }{%% Windows case: no warrantee.
    \write18{echo "\@RSeed" > \jobname.lmr}
  }
}
%%%%%%%% Windows : 'cat' does not work... need cygwin?
\def\LoadRandomSeed#1{% #1 is the filename having random seed at 1st line.
  \IfFileExists{/dev/urandom}{%%% NOT Windows
    \begingroup\makeatletter\endlinechar=\m@ne\everyeof{\noexpand}
    \edef\@@x{\endgroup\def\noexpand\@RSeed{\@@input|"cat '#1'" }%%%
    }\@@x%%%
  }{%%% Windows only
    \begingroup\makeatletter\endlinechar=\m@ne\everyeof{\noexpand}
    \edef\@@x{\endgroup\def\noexpand\@RSeed{\@@input|"type '#1'" }%%%
    }\@@x%%%
  }%%%
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% InitRandomSeed : load .lmr file or call NewRandomSeed and save
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\InitRandomSeed#1{%%%
  \@imcnti=#1
  \ifnum\@imcnti < 0 \multiply\@imcnti by -1
  \NewRandomSeed{\number\@imcnti}%%%
  \else
  \IfFileExists{\jobname.lmr}{%%%
    \LoadRandomSeed{\jobname.lmr}
  }{%%% Debug: no File case
    \NewRandomSeed{\number\@imcnti}%%%
    \SaveRandomSeed%%%
  }
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ZRand : #3 = random integer from #1 to #2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
\def\ZRand#1#2#3{%%%
  \edef\@st{#1}\edef\@ed{#2}%%%
  \im@sub\@ed\@st\@range\im@add\@range1\@range
  \PopRSeed\tmp@rs%%%
  % Debug: tmp@rs = \tmp@rs
  \im@mod\tmp@rs\@range\ZR@tmp@r
  \im@add\ZR@tmp@r\@st\tmp@ret\edef#3{\tmp@ret}
}  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% IRand : emath wrapper of ZRand
\def\IRand#1#2#3{%%% emath wrapper
  \def\LA@IR@va{#1}\def\LA@IR@vb{#2}
  \ISub\LA@IR@vb\LA@IR@va\LA@IR@vc\IAdd\LA@IR@vc1\LA@IR@vc
  \Ransuu[d]{Int(X*(\LA@IR@vc))+(\LA@IR@va)}#3
}
%%%%%%%%%%%% will be obsolete below
\def\RandomInt#1#2#3{%%%
  \edef\@st{#1}\edef\@ed{#2}
  \im@sub\@ed\@st\@range\im@add\@range1\@range
  %%%%% Too long to compute inside the TeX
  % \im@div\@RSeed\@range\RI@tmp@a
  % \im@mul\@range\RI@tmp@a\RI@tmp@b
  % \im@sub\@RSeed\RI@tmp@b\RI@tmp@c
  % \xdef\@RSeed{\RI@tmp@a}
  %%%%%
  \CallPariGP{\@RSeed-\@range*floor(\@RSeed/\@range)}\RI@tmp@c
  % \im@add\RI@tmp@c\@st\@@r\edef\noexpand#3{\@@r}
  \im@add\RI@tmp@c\@st\@@r\gdef#3{\@@r}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% RandomSelect : select randomly from CSV
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\RandomSelect#1#2{%%%
  \rnd@i=0\relax
  \@for\member:=#1\do{%
    \advance\rnd@i\@ne
    \def\@@i{\number\rnd@i}%
    \expandafter\def\csname rsel@tmp:\@@i\endcsname{\member}%
  }%
  \ZRand1{\number\rnd@i}\rnd@tmp%
  \edef#2{\csname rsel@tmp:\rnd@tmp\endcsname}%
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% SelItem : Item with labels

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\makeatother
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%% EOF of iMath.sty %%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
